// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: codenamecreator.proto

package codenamecreator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CodenameCreatorClient is the client API for CodenameCreator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CodenameCreatorClient interface {
	GetCodename(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*NameResult, error)
	KeepGettingCodenames(ctx context.Context, opts ...grpc.CallOption) (CodenameCreator_KeepGettingCodenamesClient, error)
}

type codenameCreatorClient struct {
	cc grpc.ClientConnInterface
}

func NewCodenameCreatorClient(cc grpc.ClientConnInterface) CodenameCreatorClient {
	return &codenameCreatorClient{cc}
}

func (c *codenameCreatorClient) GetCodename(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*NameResult, error) {
	out := new(NameResult)
	err := c.cc.Invoke(ctx, "/CodenameCreator/GetCodename", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codenameCreatorClient) KeepGettingCodenames(ctx context.Context, opts ...grpc.CallOption) (CodenameCreator_KeepGettingCodenamesClient, error) {
	stream, err := c.cc.NewStream(ctx, &CodenameCreator_ServiceDesc.Streams[0], "/CodenameCreator/KeepGettingCodenames", opts...)
	if err != nil {
		return nil, err
	}
	x := &codenameCreatorKeepGettingCodenamesClient{stream}
	return x, nil
}

type CodenameCreator_KeepGettingCodenamesClient interface {
	Send(*NameRequest) error
	Recv() (*NameResult, error)
	grpc.ClientStream
}

type codenameCreatorKeepGettingCodenamesClient struct {
	grpc.ClientStream
}

func (x *codenameCreatorKeepGettingCodenamesClient) Send(m *NameRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *codenameCreatorKeepGettingCodenamesClient) Recv() (*NameResult, error) {
	m := new(NameResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CodenameCreatorServer is the server API for CodenameCreator service.
// All implementations must embed UnimplementedCodenameCreatorServer
// for forward compatibility
type CodenameCreatorServer interface {
	GetCodename(context.Context, *NameRequest) (*NameResult, error)
	KeepGettingCodenames(CodenameCreator_KeepGettingCodenamesServer) error
	mustEmbedUnimplementedCodenameCreatorServer()
}

// UnimplementedCodenameCreatorServer must be embedded to have forward compatible implementations.
type UnimplementedCodenameCreatorServer struct {
}

func (UnimplementedCodenameCreatorServer) GetCodename(context.Context, *NameRequest) (*NameResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCodename not implemented")
}
func (UnimplementedCodenameCreatorServer) KeepGettingCodenames(CodenameCreator_KeepGettingCodenamesServer) error {
	return status.Errorf(codes.Unimplemented, "method KeepGettingCodenames not implemented")
}
func (UnimplementedCodenameCreatorServer) mustEmbedUnimplementedCodenameCreatorServer() {}

// UnsafeCodenameCreatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CodenameCreatorServer will
// result in compilation errors.
type UnsafeCodenameCreatorServer interface {
	mustEmbedUnimplementedCodenameCreatorServer()
}

func RegisterCodenameCreatorServer(s grpc.ServiceRegistrar, srv CodenameCreatorServer) {
	s.RegisterService(&CodenameCreator_ServiceDesc, srv)
}

func _CodenameCreator_GetCodename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodenameCreatorServer).GetCodename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CodenameCreator/GetCodename",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodenameCreatorServer).GetCodename(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodenameCreator_KeepGettingCodenames_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CodenameCreatorServer).KeepGettingCodenames(&codenameCreatorKeepGettingCodenamesServer{stream})
}

type CodenameCreator_KeepGettingCodenamesServer interface {
	Send(*NameResult) error
	Recv() (*NameRequest, error)
	grpc.ServerStream
}

type codenameCreatorKeepGettingCodenamesServer struct {
	grpc.ServerStream
}

func (x *codenameCreatorKeepGettingCodenamesServer) Send(m *NameResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *codenameCreatorKeepGettingCodenamesServer) Recv() (*NameRequest, error) {
	m := new(NameRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CodenameCreator_ServiceDesc is the grpc.ServiceDesc for CodenameCreator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CodenameCreator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CodenameCreator",
	HandlerType: (*CodenameCreatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCodename",
			Handler:    _CodenameCreator_GetCodename_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "KeepGettingCodenames",
			Handler:       _CodenameCreator_KeepGettingCodenames_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "codenamecreator.proto",
}
